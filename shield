#!/usr/bin/env node

"use strict";

var http = require('http');
var httpProxy = require('./network_simulation/lib/proxy');
var checkServer = require('./network_simulation/lib/check_server');
var nopt = require('nopt');
var url = require('url');
var _   = require('underscore');
var util = require('util');

var RequestData = function (request, response, buffer) {
  this.request = request;
  this.response = response;
  this.buffer = buffer;
};

function ipFromRequest(reqData) {
  return reqData.request.headers['x-forwarded-for'];
}

function rejectRequest(reqData) {
  reqData.response.writeHead(400);
  reqData.response.end();
}

var ThrottleStrategy = function() {
  var self = this;
  this.ipRequestTimes = {};

  this.throttleRequest = function(request) {
    var ipAddress = ipFromRequest(request),
        now       = +new Date,
        throttle  = false;
    if (this.ipRequestTimes[ipAddress] && (( now - this.ipRequestTimes[ipAddress] ) < 20)) {
      throttle = true;
    }
    this.ipRequestTimes[ipAddress] = now;

    return throttle;
  };
};

var RoundRobinProxyStrategy = function (proxies) {
  this.proxies = proxies;
  this.position = 0;

  this.selectProxy = function() {
    var proxy = this.proxies[this.position];
    this.position = (this.position < this.proxies.length-1) ? this.position + 1 : 0;

    return proxy;
  }
};

var Queue = function (proxies, parameters) {
  var self = this;
  this.proxies = proxies;
  this.parameters = parameters;
  this.throttler = new ThrottleStrategy;
  this.proxySelector = new RoundRobinProxyStrategy(proxies);

  this.requestFinished = function () {
    return;
  };

  this.selectProxy = function() {
    return self.proxySelector.selectProxy(self.proxies);
  };

  this.takeRequest = function (reqData) {
    if (self.throttler.throttleRequest(reqData)) {
      rejectRequest(reqData);
      return;
    }
    self.selectProxy().proxyRequest(reqData.request, reqData.response, reqData.buffer);
  };
};

function checkBackends(targets, path, response) {
  var toCheck = targets.map(function (target) {
    var output = {};
    output['host'] = target['host'];
    output['port'] = target['port'];
    output['path'] = path;
    return output;
  });
  var success = function () {
    response.writeHead(200, {"Content-Type": "application/json"});
    response.end()
  };
  var error = function () {
    response.writeHead(500, {"Content-Type": "application/json"});
    response.end()
  };
  checkServer.checkServers(toCheck, success, error);
}

function main() {
  var opts = {
    "out-ports": String,
    "in-port": String,
  };
  var parsed = nopt(opts),
      inPort = parsed['in-port'] || '3000',
      outPorts = parsed['out-ports'] ? parsed['out-ports'].split(",") : ['3001'],
      targets = [],
      target,
      proxies = [],
      proxy,
      i, j;

  for (i = 0; i < outPorts.length; i++) {
    target = {'host': 'localhost', 'port': outPorts[i]};
    targets.push(target);
    for (j = 0; j < 2; j++) {
      proxy = new httpProxy.HttpProxy({'target': target});
      proxies.push(proxy);
    }
  }

  var queue = new Queue(proxies, {});
  for (i = 0; i < proxies.length; i++) {
    proxy = proxies[i];
    proxy.queue = queue;
    proxy.on("end", queue.requestFinished);
  }

  var server = http.createServer(function (req, res) {
    if (req.method === "HEAD") {
      // HEAD requests are used to monitor the status of the simulation
      // proxies[0].proxyRequest(reqData.request, reqData.response, reqData.buffer);
      checkBackends(targets, url.parse(req.url)['pathname'], res);
    } else {
      var buffer = httpProxy.buffer(req);
      var reqData = new RequestData(req, res, buffer);
      queue.takeRequest(reqData);
    }
  });

  server.on('close', function () {
    for (i = 0; i < proxies.length; i++) {
      proxies[i].close();
    }
  });
  console.log("The shield is up and listening.");
  server.listen(inPort);
}

main();
